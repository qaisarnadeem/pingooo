c
params[:country_id]
PrizeCategory.joins(:countries).where(:prizes_countries=>{:country_id=>params[:country_id]}).to_sql
c
prizes_countries.destroy_all
c
PrizesCountry.delete_all
prizes_countries.destroy_all
prizes_countries.delete_all
prizes_countries.count
prizes_countries
country_ids.blank?
c
prizes_countries.delete_all and return
country_ids.blank?prizes_countries.delete_all and return
country_ids.blank?
c
prizes_countries.not().where(:country_id=>country_ids).delete_all.to_sql
prizes_countries.not.where(:country_id=>country_ids).delete_all.to_sql
prizes_countries.not().where(:country_id=>country_ids).delete_all.to_sql
prizes_countries.where(:country_id=>country_ids).not.delete_all.to_sql
c
prizes_countries.where("country_id not in (?)",[1]).count
prizes_countries.where('country_id not in (?)',[1]).count
prizes_countries.where('country_id not in (?)',[]).count
prizes_countries.where('country_id not in (?)',['1','2']).count
prizes_countries.where('country_id not in (?)',[1,2]).count
prizes_countries.where('country_id not in (?)',[]).count
prizes_countries.where('country_id not in (?)',[1,2]).count
prizes_countries.where('country_id not in (?)',[1]).count
prizes_countries.where('country_id not in (?)',[]).count
prizes_countries.where('country_id not in (?)',[0]).count
prizes_countries.where('country_id not in (?)',[[]]).count
prizes_countries.where('country_id not in (?)',[]).count
prizes_countries.where('country_id not in (?)',country_ids).count
prizes_countries.where('country_id not in (?)',country_ids)
country_ids ||=[]
country_ids
c
prizes_countries.where('country_id not in ?',country_ids).to_sql
country_ids
c
params
c
params
c
params
c
params[:countries]
params
c
c=@user.update(user_params)
user_params
@user
params
c
prize_category_id
CountrySpecificPrize.all.map &:country_id
CountrySpecificPrize.map &:country_id
CountrySpecificPrize.count
user.country_id
self.find_by_country_id_and_prize_category_id(prize_category_id,user.country_id)
user.country
c
prize_category=PrizeCategory.find(prize_category_id)
PrizeCategory.find(:prize_category_id)prize_category=PrizeCategory.find(prize_category_id)
PrizeCategory.find(:prize_category_id)
prize_category_id
PrizeCategory.find 1
PrizeCategory.all.map &:id
PrizeCategory.all.map :id
PrizeCategory.map :id
PrizeCategory.count
prize_category_id
prize_category=PrizeCategory.find(:prize_category_id)
c
n
find_or_add_all_country_prize_for(prize_category_id)
find_by_country_id_and_prize_category_id(prize_category_id,user.country_id)
country_specific_prize
country_specific_prize=self.find_by_country_id_and_prize_category_id(prize_category_id,user.country_id)
country_specific_prize
c
n
country_specific_prize
country_specific_prize=self.find_by_country_id_and_prize_category_id(prize_category_id,user.country.id)
country_specific_prize
country_specific_prize=find_or_add_all_country_prize_for(prize_category_id) unless country_specific_prize
country_specific_prize=self.find_by_country_id_and_prize_category_id(prize_category_id,user.country.id)
user.country
country_specific_prize=nil
user=User.find(user_id)
c
user_id
c
user
user_id
prize_category_id
c
user
prize_category_id
c
prize_category
c
user_id && prize_category
c
@user.valid?
@user = User.new({:nickname=>params[:nickname]})
c
@user.errors.messages
@user.errors
@user.valid?
@user = User.new({:nickname=>params[:nickname]})
params
c
params
@gameplay.chance_number
@gameplay
c
@gameplay.valid?
@gameplay = Gameplay.new(gameplay_params)
c
@gameplay.valid?
@gameplay = Gameplay.new(gameplay_params)
params
c
User.last.secret_code
params[:secret_code]
>params[:secret_code]
User.where(:secret_code=>params[:secret_code]>params[:secret_code])
User.where(:secret_code=>params[:secret_code])
params
User.where(:secret_code=>'c4ca4238a0b923820dcc509a6f75849b')
User.last
user=User.find_by_secret_code(params[:secret_code])
c
["pictures","competition_pictures"].include?(params[:attachment])
["pictures","competition_pictures"].include?(params[:attachement])
c
params
params[:attachement]
(params[:attachement]
["pictures","competition_pictures"].include?(params[:attachement])
